<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2009-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.UserDao">

    <!-- readOnly 可读写的缓存会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。即缓存数据可以被修改 -->
    <!-- eviction 缓存内容的收回策略 -->
    <!--开启该mapper下的二级缓存-->
    <!--
    <cache flushInterval="60000" readOnly="true" size="512" eviction="FIFO"/>-->

    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>


    <!--用到了User别名-->
    <resultMap type="po.User" id="UserResult">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
    </resultMap>

    <!--useCache="false"对该statement禁用二级缓存-->
    <select id="findUserById" parameterType="int" resultMap="UserResult" useCache="false"><!--使用resultType需要数据库中的字段与bean实体类中的属性名一致-->
    SELECT * FROM user WHERE id = #{id:INTEGER}
    </select>

    <!--引用别名-->                      <!--这里的resultType的返回类型为查询语句的每一条记录的返回类型-->
    <select id="findUserByUsername" parameterType="java.lang.String" resultType="User">
        SELECT * FROM user WHERE username LIKE '%${value}%'<!--parameterType传输单个简单类型值,${}的sql语句拼接的方式括号中只能是value。-->
    </select>

    <select id="findUserByCustomer" parameterType="po.Customer" resultType="User">
        SELECT * FROM USER WHERE username LIKE '%${user.username}%' AND password = #{user.password}
    </select>

    <!--自增主键返回-->
    <insert id="insertUser" parameterType="po.User" flushCache="true">
        <!--selectKey将主键返回-->    <!--AFTER-->             <!--resultType:返回的主键是什么类型-->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            <!--LAST_INSERT_ID():是mysql的函数，返回auto_increment自增列新记录id值。-->
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO USER (username,password)
        VALUES (#{username},#{password})
    </insert>

    <!--非自增主键返回-->
    <insert id="insertUsers" parameterType="po.User" flushCache="true">
        <!--需要将表中的id字段类型改为String-->                 <!--BEFORE-->
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        INSERT INTO USER (username,password) VALUES (#{username},#{password})
    </insert>


    <!--flushCache="true"刷新缓存，对对数据库有修改操作的statement操作设置该属性，清空原有缓存，避免其他查询statement出现脏读情况-->
    <delete id="deleteUserById" parameterType="int" flushCache="true">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <update id="updateUserById" parameterType="po.User">
        UPDATE user SET
        username = #{username},
        password = #{password}
        WHERE
        id = #{id}
    </update>

    <update id="updateUser" parameterType="po.User">
        UPDATE user SET username = #{username}
    </update>

</mapper>
