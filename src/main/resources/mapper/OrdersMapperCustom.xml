<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2009-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!--配置文件校验标签-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--与该sql映射文件对应的接口的全路径,写上之后黑乌鸦就能映射过来-->
<mapper namespace="mapper.OrdersMapperCustom">

    <!--
        定义查询订单关联查询用户信息的resultMap.将整个查询结果映射到po.Orders
    -->
    <resultMap id="OrdersUserResultMap" type="po.Orders">
        <!--配置映射的订单信息-->
        <!--id表示查询结果中的唯一标识  在这里是订单的唯一标识  如果是由多列组成的唯一标识，那么就需要配置多个id
            column：id 是订单信息中的唯一标识列
            property：id 是订单信息唯一标识列所映射到orders中的id属性
            最终resultMap对column和property做一个映射关系（对应关系）
        -->
        <id column="id" property="id"></id>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!--配置type属性指定的实体类,映射的关联用户信息
            association：用于映射关联查询单个对象的信息\User
            property：将要关联查询的用户实体类信息 映射到orders中对应的属性中去
        -->
        <association property="user" javaType="po.User">
            <!--再分别对该关联查询的单个对象中的内容分别进行映射-->
            <!--id 关联用户信息的唯一标识
              column: 指定唯一标识用户的信息
              property：映射到user的那个属性
            -->
            <id column="id" property="id"/>
            <result column="username" property="username"/>
            <result column="birthday" property="birthday"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>

    </resultMap>

    <!--定义查询订单及订单明细信息的resultMap使用extends继承，不用在中配置订单信息和用户信息的映射-->
    <resultMap id="OrdersAndOrderdetailResultMap" type="Orders" extends="OrdersUserResultMap">
        <!-- 订单信息 -->
        <!-- 用户信息 -->
        <!-- 使用extends继承，不用再在该resultMap中配置订单信息和用户信息的映射 -->
        <!-- 订单明细信息
                        如果映射到实体类中对应的属性是集合就使用collection标签进行映射，如果是其他实体类对应就使用association标签。
                一个订单关联查询出了多条明细，要使用collection进行映射。
                collection：对关联查询到多条记录映射到集合对象中
                property：将关联查询到多条记录映射到po.Orders哪个属性
                ofType：指定映射到list集合属性中pojo的类型
         -->
        <collection property="orderdetails" ofType="Orderdetail">
            <!--切记这里的column是sql语句查询的列，并不一定名称是数据库字段，有可能使用了别名，需要对应的去sql语句中去寻找真正使用的字段-->
            <id column="orderdetail_id" property="id"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
            <result column="orders_id" property="ordersId"/>
        </collection>

    </resultMap>

    <resultMap id="UserAndItemsResultMap" type="User"><!--type对应多层级联映射的最外层实体-->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>
        <result column="address" property="address"/>

        <!--订单信息
            一个用户对应多个订单，使用collection映射
        -->
        <collection property="ordersList" ofType="Orders">
            <id column="id" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>

            <!-- 订单明细
               一个订单包括 多个明细
            -->
            <collection property="orderdetails" ofType="Orderdetail">
                <id column="orderdetail_id" property="id"/>
                <result column="orders_id" property="ordersId"/>
                <result column="items_id" property="itemsId"/>
                <result column="items_num" property="itemsNum"/>

                <!-- 商品信息
                     一个订单明细对应一个商品
                -->
                <association property="items" javaType="Items">
                    <id column="items_id" property="id"/>
                    <result column="items_name" property="name"/>
                    <result column="items_price" property="price"/>
                    <result column="items_pic" property="pic"/>
                    <result column="items_createtime" property="createtime"/>
                    <result column="items_detail" property="detail"/>
                </association>

            </collection>

        </collection>

    </resultMap>
    
    <resultMap id="OrdersUserLazyLoadingResultMap" type="Orders">
        <!--对订单信息映射-->
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!-- 实现对用户信息进行延迟加载
               select：指定延迟加载需要执行的statement的id（此处是根据user_id查询用户信息的statement）
               要使用userMapper.xml中findUserById完成根据用户id(user_id)对用户信息的查询，因为Orders表中保存了User表的主键user_id.
               如果findUserById不在本mapper中需要前边加namespace.statement的id

               column：订单信息中关联用户信息查询的列，是user_id
               关联查询的sql理解为：
           SELECT orders.*,
           (SELECT username FROM USER WHERE orders.user_id = user.id)username,
           (SELECT sex FROM USER WHERE orders.user_id = user.id)sex
           FROM orders -->
        <!--
            触发该resultMap的statement中sql语句查询的user_id字段对应该resultMap映射的实体Orders中的user属性，而user属性的实体是User类
            当调用关于该user属性的方法的时候触发select语句。参数是查询出的column属性中的值
        -->
        <association  column="user_id" property="user" javaType="User" select="dao.UserDao.findUserById"/>

    </resultMap>
    
    <!--resultType方式关联映射查询Orders，User属性，利用java封装特性--><!--不必在Orders实体类中声明User属性-->
    <select id="findOrdersUserResultType" resultType="OrdersUser">
        <!--联合查询两表的内容，查询出的内容封装到一个表中-->
        SELECT orders.*,USER.username,USER.sex,USER.address FROM orders, USER WHERE orders.user_id = user.id
    </select>

    <!--resultMap方式关联映射查询Orders属性，及其User属性的属性，利用精确的映射特性--><!--需要在Orders实体类中声明User属性-->
    <select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
        SELECT orders.*,user.username,user.sex,user.address from orders,user WHERE orders.user_id = user.id
    </select>

    <select id="findOrdersAndOrderdetailResultMap" resultMap="OrdersAndOrderdetailResultMap">
        SELECT ORDERS .*,
               USER .username,USER .sex,USER .address,
               orderdetail.id orderdetail_id,orderdetail.items_id,orderdetail.items_num,orderdetail.orders_id
        FROM orders,USER,orderdetail
        WHERE orders.user_id = USER .id AND orderdetail.orders_id = orders.id
    </select>

    <select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
        <!--映射思路：
            将用户信息映射到 user 中。
            在 user 类中添加订单列表属性List orderslist，将用户创建的订单映射到orderslist
            在Orders中添加订单明细列表属性Listorderdetials，将订单的明细映射到orderdetials
            在OrderDetail中添加Items属性，将订单明细所对应的商品映射到Items

            可能有些情况下在一个表中其直接添加另外一个表做属性查询可以更好的查询映射，
            但是这样无形中使数据库面临一个问题。表太过臃肿，不易维护。所以选择多层关联查询
        -->
        SELECT orders.*,
        USER.username, USER.sex, USER.address,
        orderdetail.id orderdetail_id,orderdetail.items_id, orderdetail.items_num, orderdetail.orders_id,
        <!--items表的所有字段几乎都在其他表中有名称相似的字段，所以此处查询出的内容都使用了别名，在实体类映射的时候才不会出错-->
        items.name items_name,items.detail items_detail, items.price items_price
        FROM orders, USER, orderdetail, items
        WHERE orders.user_id = user.id AND orderdetail.orders_id = orders.id AND orderdetail.items_id = items.id
    </select>

    <!--查询订单并且关联查询用户信息，被关联的用户信息需要通过 association 延迟加载-->
    <select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoadingResultMap">
         select * from orders
    </select>

</mapper>
